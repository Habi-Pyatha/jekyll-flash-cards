---
ruby:
- question: What is the difference between `==` and `eql?` in Ruby?
  answer: In Ruby, `==` is used to check if two objects are equal in value, while
    `eql?` is a stricter comparison that checks both the value and type of the objects.
- question: What are blocks, procs, and lambdas in Ruby?
  answer: Blocks are anonymous functions passed to methods. Procs are objects that
    store blocks, and lambdas are a type of Proc with a stricter argument checking
    behavior.
- question: What is the difference between `map` and `collect` in Ruby?
  answer: "`map` and `collect` are synonyms in Ruby, both used to iterate over a collection
    and return a new array containing the results of the block execution on each element."
- question: What is a symbol in Ruby?
  answer: A symbol in Ruby is an immutable, lightweight, and unique identifier represented
    by a colon followed by a name (e.g., `:name`). It's commonly used for keys in
    hashes.
- question: What is the purpose of `self` in Ruby?
  answer: "`self` refers to the current object in context. It changes depending on
    where it is calledâ€”inside an instance method, it refers to the instance, and inside
    a class method, it refers to the class."
- question: What is a class variable and an instance variable in Ruby?
  answer: Class variables (`@@var`) are shared among all instances of a class, while
    instance variables (`@var`) are unique to each instance of a class.
- question: What are mixins in Ruby?
  answer: Mixins in Ruby are a way to include reusable modules in a class. A module
    can be included in a class to share functionality without using inheritance.
- question: What is the difference between `require` and `load` in Ruby?
  answer: "`require` loads a file only once, and it is used to load external libraries.
    `load` can be used multiple times to load a file and is often used for reloading
    files during runtime."
- question: Explain how garbage collection works in Ruby.
  answer: Garbage collection in Ruby automatically reclaims memory by removing objects
    that are no longer in use, freeing up resources to avoid memory leaks.
- question: What are the different ways to iterate over a collection in Ruby?
  answer: Ruby provides various iteration methods like `each`, `map`, `select`, `reject`,
    `inject`, `reduce`, and others, allowing you to iterate through arrays, hashes,
    and other enumerable objects.
- question: What is the purpose of the `freeze` method in Ruby?
  answer: "`freeze` prevents an object from being modified. It can be used to make
    objects immutable and protect them from accidental changes."
- question: What are regular expressions in Ruby?
  answer: Regular expressions in Ruby are patterns used to match strings or substrings
    based on specific patterns. They are used in methods like `=~`, `match`, `scan`,
    and others.
- question: What is the difference between a proc and a lambda?
  answer: Both `Proc` and `lambda` are objects that store blocks of code, but lambdas
    enforce strict argument checking, while procs are more lenient. Also, lambdas
    return from the calling method, while procs return from within themselves.
- question: How do you handle exceptions in Ruby?
  answer: Exceptions in Ruby are handled using `begin`, `rescue`, and `ensure` blocks.
    You wrap potentially problematic code in a `begin` block, handle exceptions with
    `rescue`, and use `ensure` for cleanup.
- question: What is the `each_with_index` method in Ruby?
  answer: "`each_with_index` is an iterator that loops over a collection and provides
    both the element and its index in each iteration."
- question: What is a hash in Ruby?
  answer: A hash in Ruby is a collection of key-value pairs, where keys are unique,
    and each key is associated with a value.
- question: What are the common Ruby data types?
  answer: Common Ruby data types include strings, numbers (integers and floats), arrays,
    hashes, symbols, booleans, and nil.
- question: What is the purpose of the `super` keyword in Ruby?
  answer: "`super` is used to call a method in the parent class from within a subclass,
    either with or without arguments, depending on the situation."
- question: How can you define a method in Ruby?
  answer: A method in Ruby is defined using the `def` keyword followed by the method
    name and an optional parameter list, then the method body.
- question: What is the purpose of the `attr_accessor` method in Ruby?
  answer: "`attr_accessor` is used to define both getter and setter methods for instance
    variables in a class, reducing boilerplate code."
- question: What is duck typing in Ruby?
  answer: 'Duck typing is a concept in Ruby where the type of an object is determined
    by its behavior (methods and properties) rather than its class or inheritance.
    It follows the principle: ''If it looks like a duck and quacks like a duck, it''s
    a duck.'''
javascript:
- question: What is the difference between `var`, `let`, and `const` in JavaScript?
  answer: "`var` is function-scoped and can be re-declared, `let` is block-scoped
    and can be reassigned but not re-declared, and `const` is also block-scoped but
    cannot be reassigned or re-declared."
- question: What are closures in JavaScript?
  answer: A closure is a function that retains access to its lexical environment (variables
    from the outer function) even after the outer function has executed.
- question: What is the `this` keyword in JavaScript?
  answer: "`this` refers to the context in which a function is called. It could refer
    to the global object, the object calling the method, or the object bound via `bind`,
    `call`, or `apply`."
- question: What is event delegation in JavaScript?
  answer: Event delegation is a technique where you attach a single event listener
    to a parent element and handle events for child elements through event bubbling.
- question: What is the difference between `null` and `undefined` in JavaScript?
  answer: "`null` is an intentional absence of any object value, while `undefined`
    means a variable has been declared but not assigned a value."
- question: What are promises in JavaScript?
  answer: A promise is an object representing the eventual completion (or failure)
    of an asynchronous operation. It allows handling asynchronous operations more
    effectively using `then`, `catch`, and `finally`.
- question: What is the difference between synchronous and asynchronous code?
  answer: Synchronous code runs sequentially, blocking the execution until each task
    is completed, while asynchronous code allows non-blocking operations and continues
    execution while waiting for tasks to complete.
- question: What is the purpose of the `bind()` method in JavaScript?
  answer: "`bind()` is used to set the value of `this` within a function, creating
    a new function with `this` permanently bound to a specific value."
- question: What are arrow functions in JavaScript?
  answer: Arrow functions provide a shorter syntax for writing functions and lexically
    bind `this`, meaning the value of `this` inside an arrow function is inherited
    from its surrounding context.
- question: What is the event loop in JavaScript?
  answer: The event loop is responsible for managing asynchronous operations in JavaScript.
    It checks the call stack and the message queue, executing callbacks from the queue
    when the stack is empty.
- question: What are the different types of errors in JavaScript?
  answer: JavaScript errors include syntax errors, runtime errors, and logical errors.
    Syntax errors occur during parsing, runtime errors happen during execution, and
    logical errors are flaws in logic that lead to incorrect behavior.
- question: What is hoisting in JavaScript?
  answer: Hoisting is a JavaScript mechanism where variable and function declarations
    are moved to the top of their containing scope during the compile phase, making
    them accessible before the actual declaration.
- question: What are JavaScript modules?
  answer: Modules in JavaScript allow you to split your code into reusable pieces.
    You can use `export` to export variables/functions and `import` to bring them
    into other files.
- question: What is a higher-order function in JavaScript?
  answer: A higher-order function is a function that either takes one or more functions
    as arguments or returns a function as its result.
- question: What is the spread operator in JavaScript?
  answer: The spread operator (`...`) is used to expand elements of an iterable (like
    arrays or objects) into individual elements or properties. It is also used to
    merge or copy objects and arrays.
- question: What is the `setTimeout()` function in JavaScript?
  answer: "`setTimeout()` is a function that executes a callback function after a
    specified delay (in milliseconds)."
- question: What are template literals in JavaScript?
  answer: Template literals are a feature in JavaScript that allows embedding expressions
    inside string literals, using backticks (`) and `${}` for interpolation.
- question: What is the difference between `apply()`, `call()`, and `bind()`?
  answer: "`call()` and `apply()` are used to invoke a function with a specific `this`
    value and arguments. `call()` takes arguments individually, while `apply()` takes
    arguments as an array. `bind()` returns a new function with `this` permanently
    set to the provided value."
- question: What is the difference between `==` and `===` in JavaScript?
  answer: "`==` compares values after type coercion, while `===` compares both value
    and type, without performing type coercion."
- question: What is the `localStorage` and `sessionStorage` in JavaScript?
  answer: "`localStorage` allows you to store data persistently across sessions, while
    `sessionStorage` stores data only for the duration of the page session."
- question: What is the `fetch()` API in JavaScript?
  answer: The `fetch()` API is used to make HTTP requests in JavaScript. It returns
    a promise that resolves with the response of the request.
- question: Is Javascript a dynamically typed or statically typed language?
  answer: Javascript is a dynamically typed language.
python:
- question: What is the difference between `deepcopy` and `shallow copy` in Python?
  answer: A shallow copy creates a new object, but does not recursively copy nested
    objects, whereas a deep copy creates a new object and recursively copies all nested
    objects.
- question: What are Python decorators?
  answer: Python decorators are functions that modify the behavior of other functions
    or methods. They are often used for logging, enforcing access control, or memoization.
- question: What is the difference between `list` and `tuple` in Python?
  answer: A `list` is mutable, meaning its elements can be modified, whereas a `tuple`
    is immutable, meaning its elements cannot be modified after creation.
- question: What are Python generators?
  answer: Generators are iterators that allow lazy evaluation. They are defined using
    a function with `yield` statements, which return values one at a time instead
    of storing them all in memory.
- question: What is the difference between `range()` and `xrange()` in Python?
  answer: "`xrange()` was used in Python 2 to generate an iterator that yields values
    on demand (lazy evaluation), while `range()` created a list. In Python 3, `range()`
    behaves like `xrange()` from Python 2."
- question: What are Python's built-in data types?
  answer: Python has several built-in data types, including integers (`int`), floating-point
    numbers (`float`), strings (`str`), lists (`list`), dictionaries (`dict`), sets
    (`set`), and tuples (`tuple`).
- question: What is the purpose of `self` in Python classes?
  answer: "`self` is a reference to the current instance of the class. It is used
    to access instance variables and methods from within the class."
- question: What is the purpose of the `with` statement in Python?
  answer: The `with` statement is used to simplify the management of resources (like
    file handling) by automatically handling setup and cleanup operations, such as
    opening and closing files.
- question: What is a lambda function in Python?
  answer: A lambda function is an anonymous, small function defined with the `lambda`
    keyword. It can have any number of arguments but only one expression.
- question: What are list comprehensions in Python?
  answer: List comprehensions provide a concise way to create lists by applying an
    expression to each item in an iterable, optionally filtering results with an `if`
    condition.
- question: What is the difference between `==` and `is` in Python?
  answer: "`==` compares the values of two objects, while `is` checks if two objects
    refer to the same memory location (identity comparison)."
- question: How does Python handle memory management?
  answer: Python uses automatic memory management with a garbage collector that reclaims
    unused memory. The memory management system includes reference counting and cyclic
    garbage collection.
- question: What is the `global` keyword in Python?
  answer: The `global` keyword is used to declare a variable as global, making it
    accessible and modifiable across all scopes in a Python program.
- question: What are Python's `*args` and `**kwargs`?
  answer: "`*args` is used to pass a variable number of positional arguments to a
    function, while `**kwargs` is used to pass a variable number of keyword arguments."
- question: What is the purpose of the `__init__` method in Python?
  answer: The `__init__` method is a special method used to initialize objects when
    an instance of a class is created. It is called automatically when a new object
    is instantiated.
- question: What is the `GIL` (Global Interpreter Lock) in Python?
  answer: The Global Interpreter Lock (GIL) is a mechanism in CPython (Python's default
    implementation) that prevents multiple native threads from executing Python bytecodes
    simultaneously. It can be a bottleneck for multi-threaded programs.
- question: What are Python modules and packages?
  answer: A module is a file containing Python code, while a package is a collection
    of modules organized in a directory. Both help in organizing and reusing code.
- question: What is the difference between `del` and `remove()` in Python?
  answer: "`del` is used to delete an element from a list by index or to delete an
    entire variable, while `remove()` removes the first occurrence of a value in a
    list."
- question: What are Python's `set` and `frozenset`?
  answer: A `set` is an unordered collection of unique elements that is mutable, whereas
    a `frozenset` is an immutable version of a set.
- question: What are Python's standard libraries?
  answer: Python's standard library includes modules for handling file I/O, operating
    system operations, threading, networking, and more, offering a wide range of functionality
    without needing external packages.
